seti $1 127 # 128 special reg, holder of 128 in memory for LED output
seti $2 1 # special reg for 1
add $1 $1 $2 # 128 special reg, holder of 128 in memory for LED output
seti $3 63 # to be added to i for comparisons at top range of memory
seti $5 0 # fwdBack, Holds value to choose between forward and reverse. 0 = forward, 1 = reverse
seti $14 0 # initialize branch reg to 0
add $4 $1 $zero # $4 is i, iterator, initialize to 128
demoButton:  
  seti $14 0 # initialize branch reg to 0
  beq demoCondition $input # if no input, jump straight to condition without changing fwdBack
  beq demo1 $5 # if input present, branch to set $5 to 1 if it is 0. Otherwise, continue to demo0
demo0:
  seti $5 0
  j demoCondition
demo1:
  seti $5 1
demoCondition:
  add $14 $1 $3 # set branch reg to 191. Will always be reset to 0 before reaching branch
  beq demoBackwards $4 # parse backwards if output memory limit is reached
  sub $14 $14 $3 # set branch reg to 128 
  beq demoForward $1 # parse forwards if LED lower bound is reached
  seti $14 0 #implicit branch reg set to 0
  beq demoForward $2 # branch to forward if forRev = 0, if not, go on to backwards. 
 
demoBackwards:
  sb $zero $4 # set value at location of i register to 0
  sub $4 $4 $2 # deincrement i by 1, stored in $2
  j demoButton # jump to demo_buttom
demoForward:
  sb $2 $4 # set value at location of i register to 1
  add $4 $4 $2 # increment i by 1, stored in $2
  j demoButton #jump to demo_button
  